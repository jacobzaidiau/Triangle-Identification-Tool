//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TriangleClient.ToolReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TriangleToolSoap", Namespace="https://jacob.zaidi.nz/")]
    public partial class TriangleTool : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback ErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPageCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TriangleTool() {
            this.Url = global::TriangleClient.Properties.Settings.Default.TriangleClient_ToolReference_TriangleTool;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckCompletedEventHandler CheckCompleted;
        
        /// <remarks/>
        public event ErrorCompletedEventHandler ErrorCompleted;
        
        /// <remarks/>
        public event GetPageCountCompletedEventHandler GetPageCountCompleted;
        
        /// <remarks/>
        public event GetPageCompletedEventHandler GetPageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://jacob.zaidi.nz/Check", RequestNamespace="https://jacob.zaidi.nz/", ResponseNamespace="https://jacob.zaidi.nz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool[] Check(string a, string b, string c) {
            object[] results = this.Invoke("Check", new object[] {
                        a,
                        b,
                        c});
            return ((bool[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckAsync(string a, string b, string c) {
            this.CheckAsync(a, b, c, null);
        }
        
        /// <remarks/>
        public void CheckAsync(string a, string b, string c, object userState) {
            if ((this.CheckOperationCompleted == null)) {
                this.CheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOperationCompleted);
            }
            this.InvokeAsync("Check", new object[] {
                        a,
                        b,
                        c}, this.CheckOperationCompleted, userState);
        }
        
        private void OnCheckOperationCompleted(object arg) {
            if ((this.CheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCompleted(this, new CheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://jacob.zaidi.nz/Error", RequestNamespace="https://jacob.zaidi.nz/", ResponseNamespace="https://jacob.zaidi.nz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Error(string a, string b, string c) {
            object[] results = this.Invoke("Error", new object[] {
                        a,
                        b,
                        c});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ErrorAsync(string a, string b, string c) {
            this.ErrorAsync(a, b, c, null);
        }
        
        /// <remarks/>
        public void ErrorAsync(string a, string b, string c, object userState) {
            if ((this.ErrorOperationCompleted == null)) {
                this.ErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnErrorOperationCompleted);
            }
            this.InvokeAsync("Error", new object[] {
                        a,
                        b,
                        c}, this.ErrorOperationCompleted, userState);
        }
        
        private void OnErrorOperationCompleted(object arg) {
            if ((this.ErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ErrorCompleted(this, new ErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://jacob.zaidi.nz/GetPageCount", RequestNamespace="https://jacob.zaidi.nz/", ResponseNamespace="https://jacob.zaidi.nz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetPageCount() {
            object[] results = this.Invoke("GetPageCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetPageCountAsync() {
            this.GetPageCountAsync(null);
        }
        
        /// <remarks/>
        public void GetPageCountAsync(object userState) {
            if ((this.GetPageCountOperationCompleted == null)) {
                this.GetPageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPageCountOperationCompleted);
            }
            this.InvokeAsync("GetPageCount", new object[0], this.GetPageCountOperationCompleted, userState);
        }
        
        private void OnGetPageCountOperationCompleted(object arg) {
            if ((this.GetPageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPageCountCompleted(this, new GetPageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://jacob.zaidi.nz/GetPage", RequestNamespace="https://jacob.zaidi.nz/", ResponseNamespace="https://jacob.zaidi.nz/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPage(int page) {
            object[] results = this.Invoke("GetPage", new object[] {
                        page});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPageAsync(int page) {
            this.GetPageAsync(page, null);
        }
        
        /// <remarks/>
        public void GetPageAsync(int page, object userState) {
            if ((this.GetPageOperationCompleted == null)) {
                this.GetPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPageOperationCompleted);
            }
            this.InvokeAsync("GetPage", new object[] {
                        page}, this.GetPageOperationCompleted, userState);
        }
        
        private void OnGetPageOperationCompleted(object arg) {
            if ((this.GetPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPageCompleted(this, new GetPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckCompletedEventHandler(object sender, CheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ErrorCompletedEventHandler(object sender, ErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPageCountCompletedEventHandler(object sender, GetPageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPageCompletedEventHandler(object sender, GetPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591